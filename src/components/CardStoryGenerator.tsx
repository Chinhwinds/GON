import React, { useState } from 'react';
import type { Card } from '../data/cards';
import { cards } from '../data/cards';
import { generateStory } from '../services/storyService';
import 'bootstrap/dist/css/bootstrap.min.css';

interface StoryResult {
    story: string;
    lesson: string;
    cardsUsed: Card[];
}

const CardStoryGenerator: React.FC = () => {
    const [selectedCards, setSelectedCards] = useState<Card[]>([]);
    const [storyResult, setStoryResult] = useState<StoryResult | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    // Ph√¢n lo·∫°i th·∫ª theo type
    const protectionCards = cards.filter(card => card.type === 'B·∫£o V·ªá');
    const communityCards = cards.filter(card => card.type === 'C·ªông ƒê·ªìng');
    const disasterCards = cards.filter(card => card.type === 'Thi√™n Tai');

    const handleCardSelect = (card: Card) => {
        const isSelected = selectedCards.some(selected => selected.id === card.id);

        if (isSelected) {
            setSelectedCards(selectedCards.filter(selected => selected.id !== card.id));
        } else {
            setSelectedCards([...selectedCards, card]);
        }
    };

    const handleClearSelection = () => {
        setSelectedCards([]);
        setStoryResult(null);
        setError(null);
    };

    const createPrompt = (cards: Card[]): string => {
        const protectionCount = cards.filter(card => card.type === 'B·∫£o V·ªá').length;
        const communityCount = cards.filter(card => card.type === 'C·ªông ƒê·ªìng').length;
        const disasterCount = cards.filter(card => card.type === 'Thi√™n Tai').length;

        let prompt = `B·∫°n l√† m·ªôt AI chuy√™n t·∫°o c√¢u chuy·ªán gi√°o d·ª•c v·ªÅ b·∫£o v·ªá m√¥i tr∆∞·ªùng d·ª±a tr√™n c√°c h√†nh ƒë·ªông trong tr√≤ ch∆°i.

C√°c th·∫ª ƒë√£ ƒë∆∞·ª£c ch∆°i trong tr√≤ ch∆°i:
`;

        cards.forEach((card, index) => {
            prompt += `${index + 1}. ${card.name} - ${card.description} (Hi·ªáu ·ª©ng: ${card.effect})\n`;
        });

        prompt += `\nPh√¢n lo·∫°i th·∫ª:
- Th·∫ª B·∫£o V·ªá (${protectionCount} l√°): ${cards.filter(card => card.type === 'B·∫£o V·ªá').map(card => card.name).join(', ') || 'Kh√¥ng c√≥'}
- Th·∫ª C·ªông ƒê·ªìng (${communityCount} l√°): ${cards.filter(card => card.type === 'C·ªông ƒê·ªìng').map(card => card.name).join(', ') || 'Kh√¥ng c√≥'}
- Th·∫ª Thi√™n Tai (${disasterCount} l√°): ${cards.filter(card => card.type === 'Thi√™n Tai').map(card => card.name).join(', ') || 'Kh√¥ng c√≥'}

H√£y t·∫°o:
1. M·ªôt c√¢u chuy·ªán ng·∫Øn g·ªçn (150-200 t·ª´) k·∫øt h·ª£p c√°c h√†nh ƒë·ªông tr√™n th√†nh m·ªôt c√¢u chuy·ªán c√≥ √Ω nghƒ©a v·ªÅ b·∫£o v·ªá m√¥i tr∆∞·ªùng
2. M·ªôt b√†i h·ªçc r√∫t ra t·ª´ c√¢u chuy·ªán (50-80 t·ª´)

Format tr·∫£ v·ªÅ:
C√ÇU CHUY·ªÜN:
[vi·∫øt c√¢u chuy·ªán ·ªü ƒë√¢y]

B√ÄI H·ªåC:
[vi·∫øt b√†i h·ªçc ·ªü ƒë√¢y]

H√£y t·∫°o c√¢u chuy·ªán sinh ƒë·ªông, c√≥ √Ω nghƒ©a gi√°o d·ª•c v√† ph√π h·ª£p v·ªõi c√°c h√†nh ƒë·ªông ƒë√£ ch∆°i.`;

        return prompt;
    };

    const generateStory = async () => {
        if (selectedCards.length === 0) {
            setError('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt th·∫ª b√†i!');
            return;
        }

        setIsLoading(true);
        setError(null);

        try {
            // T·∫°o prompt
            const prompt = createPrompt(selectedCards);

            // G·ªçi service ƒë·ªÉ t·∫°o c√¢u chuy·ªán
            const data = await generateStory({ prompt, cards: selectedCards });

            // Parse response ƒë·ªÉ t√°ch c√¢u chuy·ªán v√† b√†i h·ªçc
            const storyMatch = data.response.match(/C√ÇU CHUY·ªÜN:\s*([\s\S]*?)(?=B√ÄI H·ªåC:|$)/);
            const lessonMatch = data.response.match(/B√ÄI H·ªåC:\s*([\s\S]*?)$/);

            const story = storyMatch ? storyMatch[1].trim() : 'Kh√¥ng th·ªÉ t·∫°o c√¢u chuy·ªán.';
            const lesson = lessonMatch ? lessonMatch[1].trim() : 'Kh√¥ng th·ªÉ t·∫°o b√†i h·ªçc.';

            setStoryResult({
                story,
                lesson,
                cardsUsed: selectedCards,
            });

        } catch (err) {
            setError(err instanceof Error ? err.message : 'C√≥ l·ªói x·∫£y ra!');
        } finally {
            setIsLoading(false);
        }
    };

    const renderCard = (card: Card) => {
        const isSelected = selectedCards.some(selected => selected.id === card.id);

        return (
            <div
                key={card.id}
                className={`card h-100 ${isSelected ? 'border-success bg-light' : ''}`}
                style={{ cursor: 'pointer', transition: 'all 0.3s ease' }}
                onClick={() => handleCardSelect(card)}
            >
                <div className="card-body">
                    <div className="d-flex align-items-center mb-2">
                        <span className="badge bg-primary me-2">{card.type}</span>
                        <span className="badge bg-secondary">{card.rarity}</span>
                    </div>
                    <h6 className="card-title">{card.name}</h6>
                    <p className="card-text small text-muted">{card.description}</p>
                    <div className="mt-auto">
                        <small className="text-success fw-bold">{card.effect}</small>
                    </div>
                </div>
                {isSelected && (
                    <div className="card-footer bg-success text-white text-center">
                        <small>‚úì ƒê√£ ch·ªçn</small>
                    </div>
                )}
            </div>
        );
    };

    return (
        <div className="container-fluid py-4">
            <div className="row">
                <div className="col-12">
                    <div className="text-center mb-4">
                        <h1 className="display-4 text-success">üå± T·∫°o C√¢u Chuy·ªán T·ª´ Th·∫ª B√†i</h1>
                        <p className="lead">Ch·ªçn c√°c th·∫ª b√†i ƒë√£ ch∆°i ƒë·ªÉ t·∫°o c√¢u chuy·ªán v√† b√†i h·ªçc v·ªÅ b·∫£o v·ªá m√¥i tr∆∞·ªùng</p>
                    </div>
                </div>
            </div>

            {/* Error Message */}
            {error && (
                <div className="row mb-4">
                    <div className="col-12">
                        <div className="alert alert-danger alert-dismissible fade show" role="alert">
                            {error}
                            <button type="button" className="btn-close" onClick={() => setError(null)}></button>
                        </div>
                    </div>
                </div>
            )}

            <div className="row">
                {/* Card Selection */}
                <div className="col-lg-8">
                    <div className="card">
                        <div className="card-header bg-success text-white">
                            <h3 className="mb-0">üéØ Ch·ªçn Th·∫ª B√†i ƒê√£ Ch∆°i</h3>
                        </div>
                        <div className="card-body">
                            {/* B·∫£o V·ªá Cards */}
                            <div className="mb-4">
                                <h4 className="text-success">üõ°Ô∏è Th·∫ª B·∫£o V·ªá</h4>
                                <div className="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-3">
                                    {protectionCards.map(renderCard)}
                                </div>
                            </div>

                            {/* C·ªông ƒê·ªìng Cards */}
                            <div className="mb-4">
                                <h4 className="text-primary">üë• Th·∫ª C·ªông ƒê·ªìng</h4>
                                <div className="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-3">
                                    {communityCards.map(renderCard)}
                                </div>
                            </div>

                            {/* Thi√™n Tai Cards */}
                            <div className="mb-4">
                                <h4 className="text-danger">üå™Ô∏è Th·∫ª Thi√™n Tai</h4>
                                <div className="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-3">
                                    {disasterCards.map(renderCard)}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Selected Cards & Controls */}
                <div className="col-lg-4">
                    <div className="card sticky-top" style={{ top: '20px' }}>
                        <div className="card-header bg-info text-white">
                            <h4 className="mb-0">üìã Th·∫ª ƒê√£ Ch·ªçn ({selectedCards.length})</h4>
                        </div>
                        <div className="card-body">
                            {selectedCards.length === 0 ? (
                                <p className="text-muted text-center">Ch∆∞a c√≥ th·∫ª n√†o ƒë∆∞·ª£c ch·ªçn</p>
                            ) : (
                                <div className="mb-3">
                                    {selectedCards.map(card => (
                                        <div key={card.id} className="d-flex justify-content-between align-items-center mb-2 p-2 bg-light rounded">
                                            <div>
                                                <strong>{card.name}</strong>
                                                <br />
                                                <small className="text-muted">{card.effect}</small>
                                            </div>
                                            <button
                                                className="btn btn-sm btn-outline-danger"
                                                onClick={() => handleCardSelect(card)}
                                            >
                                                ‚úï
                                            </button>
                                        </div>
                                    ))}
                                </div>
                            )}

                            <div className="d-grid gap-2">
                                <button
                                    className="btn btn-success btn-lg"
                                    onClick={generateStory}
                                    disabled={selectedCards.length === 0 || isLoading}
                                >
                                    {isLoading ? (
                                        <>
                                            <span className="spinner-border spinner-border-sm me-2" role="status"></span>
                                            ƒêang t·∫°o c√¢u chuy·ªán...
                                        </>
                                    ) : (
                                        'üìñ T·∫°o C√¢u Chuy·ªán'
                                    )}
                                </button>

                                {selectedCards.length > 0 && (
                                    <button
                                        className="btn btn-outline-secondary"
                                        onClick={handleClearSelection}
                                    >
                                        üóëÔ∏è X√≥a T·∫•t C·∫£
                                    </button>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            {/* Story Result */}
            {storyResult && (
                <div className="row mt-4">
                    <div className="col-12">
                        <div className="card">
                            <div className="card-header bg-success text-white">
                                <h3 className="mb-0">üìñ C√¢u Chuy·ªán ƒê∆∞·ª£c T·∫°o</h3>
                            </div>
                            <div className="card-body">
                                <div className="row">
                                    <div className="col-md-6">
                                        <div className="card h-100">
                                            <div className="card-header bg-primary text-white">
                                                <h5 className="mb-0">üìñ C√¢u Chuy·ªán</h5>
                                            </div>
                                            <div className="card-body">
                                                <p className="card-text">{storyResult.story}</p>
                                            </div>
                                        </div>
                                    </div>

                                    <div className="col-md-6">
                                        <div className="card h-100">
                                            <div className="card-header bg-warning text-dark">
                                                <h5 className="mb-0">üí° B√†i H·ªçc</h5>
                                            </div>
                                            <div className="card-body">
                                                <p className="card-text">{storyResult.lesson}</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div className="mt-4">
                                    <h5>üéÆ Th·∫ª ƒê√£ S·ª≠ D·ª•ng</h5>
                                    <div className="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-3">
                                        {storyResult.cardsUsed.map(card => (
                                            <div key={card.id} className="col">
                                                <div className="card border-success">
                                                    <div className="card-body text-center">
                                                        <h6 className="card-title">{card.name}</h6>
                                                        <p className="card-text small text-success">{card.effect}</p>
                                                    </div>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>

                                <div className="text-center mt-4">
                                    <button
                                        className="btn btn-outline-success btn-lg"
                                        onClick={handleClearSelection}
                                    >
                                        üîÑ T·∫°o C√¢u Chuy·ªán M·ªõi
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default CardStoryGenerator; 
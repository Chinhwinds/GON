import { useState } from 'react';
import { Link } from 'react-router-dom';
import { cards } from '../data/cards';

const CardList = () => {
    const [filterType, setFilterType] = useState<string>('all');
    const [filterRarity, setFilterRarity] = useState<string>('all');
    const [searchTerm, setSearchTerm] = useState<string>('');

    const filteredCards = cards.filter(card => {
        const matchesType = filterType === 'all' || card.type === filterType;
        const matchesRarity = filterRarity === 'all' || card.rarity === filterRarity;
        const matchesSearch = card.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            card.description.toLowerCase().includes(searchTerm.toLowerCase());

        return matchesType && matchesRarity && matchesSearch;
    });

    const getRarityColor = (rarity: string) => {
        switch (rarity) {
            case 'common': return 'text-secondary';
            case 'uncommon': return 'text-success';
            case 'rare': return 'text-primary';
            case 'legendary': return 'text-warning';
            default: return 'text-dark';
        }
    };

    const getTypeIcon = (type: string) => {
        switch (type) {
            case 'B·∫£o V·ªá': return 'üõ°Ô∏è';
            case 'C·ªông ƒê·ªìng': return 'üë•';
            case 'Thi√™n Tai': return 'üå™Ô∏è';
            default: return 'üé¥';
        }
    };

    const getTypeColor = (type: string) => {
        switch (type) {
            case 'B·∫£o V·ªá': return 'bg-success';
            case 'C·ªông ƒê·ªìng': return 'bg-info';
            case 'Thi√™n Tai': return 'bg-danger';
            default: return 'bg-primary';
        }
    };

    return (
        <div className="container py-5">
            <div className="row mb-4">
                <div className="col-12">
                    <h1 className="display-4 fw-bold text-center mb-4">B·ªô S∆∞u T·∫≠p Th·∫ª</h1>
                    <p className="lead text-center text-muted mb-5">
                        Kh√°m ph√° t·∫•t c·∫£ {cards.length} th·∫ª trong v≈© tr·ª• GON
                    </p>
                </div>
            </div>

            {/* Filters */}
            <div className="row mb-4">
                <div className="col-md-4 mb-3">
                    <label htmlFor="searchInput" className="form-label">T√¨m Ki·∫øm Th·∫ª</label>
                    <input
                        type="text"
                        className="form-control"
                        id="searchInput"
                        placeholder="T√¨m theo t√™n ho·∫∑c m√¥ t·∫£..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                    />
                </div>
                <div className="col-md-4 mb-3">
                    <label htmlFor="typeFilter" className="form-label">L·ªçc Theo Lo·∫°i</label>
                    <select
                        className="form-select"
                        id="typeFilter"
                        value={filterType}
                        onChange={(e) => setFilterType(e.target.value)}
                    >
                        <option value="all">T·∫•t C·∫£ Lo·∫°i</option>
                        <option value="B·∫£o V·ªá">B·∫£o V·ªá</option>
                        <option value="C·ªông ƒê·ªìng">C·ªông ƒê·ªìng</option>
                        <option value="Thi√™n Tai">Thi√™n Tai</option>
                    </select>
                </div>
                <div className="col-md-4 mb-3">
                    <label htmlFor="rarityFilter" className="form-label">L·ªçc Theo ƒê·ªô Hi·∫øm</label>
                    <select
                        className="form-select"
                        id="rarityFilter"
                        value={filterRarity}
                        onChange={(e) => setFilterRarity(e.target.value)}
                    >
                        <option value="all">T·∫•t C·∫£ ƒê·ªô Hi·∫øm</option>
                        <option value="common">Ph·ªï Bi·∫øn</option>
                        <option value="uncommon">Kh√¥ng Ph·ªï Bi·∫øn</option>
                        <option value="rare">Hi·∫øm</option>
                        <option value="legendary">Huy·ªÅn Tho·∫°i</option>
                    </select>
                </div>
            </div>

            {/* Results count */}
            <div className="row mb-4">
                <div className="col-12">
                    <p className="text-muted">
                        Hi·ªÉn th·ªã {filteredCards.length} trong t·ªïng s·ªë {cards.length} th·∫ª
                    </p>
                </div>
            </div>

            {/* Cards Grid */}
            <div className="row g-4">
                {filteredCards.map((card) => (
                    <div key={card.id} className="col-lg-3 col-md-4 col-sm-6">
                        <Link to={`/card/${card.id}`} className="text-decoration-none">
                            <div className="card h-100 shadow-sm border-0 hover-lift">
                                <div className="card-body p-3">
                                    <div className="d-flex justify-content-between align-items-start mb-2">
                                        <span className="fs-4">{card.image}</span>
                                        <span className={`badge ${getRarityColor(card.rarity)}`}>
                                            {card.rarity === 'common' ? 'Ph·ªï Bi·∫øn' :
                                                card.rarity === 'uncommon' ? 'Kh√¥ng Ph·ªï Bi·∫øn' :
                                                    card.rarity === 'rare' ? 'Hi·∫øm' : 'Huy·ªÅn Tho·∫°i'}
                                        </span>
                                    </div>
                                    <h5 className="card-title h6 mb-2 text-dark">{card.name}</h5>
                                    <p className="card-text small text-muted mb-2">{card.description}</p>
                                    <div className="d-flex justify-content-between align-items-center">
                                        <span className={`badge ${getTypeColor(card.type)}`}>
                                            {getTypeIcon(card.type)} {card.type}
                                        </span>
                                        <div className="text-end">
                                            <div className="small text-muted">Chi ph√≠: {card.cost}</div>
                                            {card.power > 0 && <div className="small text-danger">S·ª©c m·∫°nh: {card.power}</div>}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </Link>
                    </div>
                ))}
            </div>

            {/* No results message */}
            {filteredCards.length === 0 && (
                <div className="row">
                    <div className="col-12 text-center py-5">
                        <div className="display-1 text-muted mb-3">üîç</div>
                        <h3>Kh√¥ng t√¨m th·∫•y th·∫ª</h3>
                        <p className="text-muted">H√£y th·ª≠ ƒëi·ªÅu ch·ªânh t√¨m ki·∫øm ho·∫∑c b·ªô l·ªçc</p>
                    </div>
                </div>
            )}
        </div>
    );
};

export default CardList; 